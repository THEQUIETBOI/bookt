function init() {
    const main = document.createElement("div");
    const button = document.createElement("div");
    const chat = document.createElement("div");
    const me = document.createElement("div");
    const menubuttons = document.createElement("div");
    const menus = document.createElement("button");
    const menubar = document.createElement("div");
    const input = document.createElement("input");
    const settings = document.createElement("button");
    const upload = document.createElement("input");
    const style = document.createElement("style");
    const settingspage = document.createElement("div");
    const settingscontainer = document.createElement('div');
  
    const apiput = document.createElement('input');
    const prompt = document.createElement('input');
    const close = document.createElement('button');
  
    const marcopolo = document.createElement("script");
    marcopolo.src = "https://cdn.jsdelivr.net/npm/marked/marked.min.js"
    document.head.appendChild(marcopolo);
  prompt.type = "text"
  prompt.placeholder = "How do you want the bot to act"
  close.innerHTML  = "Close"
  
  
  settingscontainer.classList.add("settings-container");
  apiput.id = "key"
    settingspage.appendChild(apiput);
    apiput.type = "text";
    apiput.placeholder = "API KEY HERE";
    upload.type = "file";
    input.type = "text";
  
  
  
  apiput.style = `
      color: white;
      font-size: 25px;
      padding-top: 50px;
      padding-left: 20px;
      font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  
  `
  
    settingspage.style = `
      background-color: rgb(46, 46, 46);
  width: 100%;
  height: 60%;
  visibility: hidden;
  display: block;
top:0;
  
  `;
  
    settings.onclick = () => {
      settingspage.style.visibility = "visible";
    };
    close.onclick = () => {
      settingspage.style.visibility = "hidden";
    };
    style.innerHTML = `
    .hidden {
      display: none;
    }
    .language-html {
  
    background-image: url('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSXusAZfaVZ5tNP2xrp9_oVLUyi5wAMWlen1Q&s'); /* Replace with your image URL */
              background-size: cover; /* Cover the entire container */
              background-position: center; /* Center the image */
              height: 500px; /* Set a height for the container (adjust as needed) */
              display: flex; /* Use flexbox for centering */
              justify-content: center; /* Center horizontally */
              align-items: center; /* Center vertically */
              color: white; /* Text color for contrast */
  
    }
    .language-javascript {
  
    background-image: url('https://www.haworth.com/content/dam/surfaces/north-america/trim/smooth/other/7r_10/7r_10.jpg'); /* Replace with your image URL */
              background-size: cover; /* Cover the entire container */
              background-position: center; /* Center the image */
              height: 500px; /* Set a height for the container (adjust as needed) */
              justify-content: center; /* Center horizontally */
              align-items: center; /* Center vertically */
              color: white; /* Text color for contrast */
  
  
    } 
  
  
    .settings-container {
      
      display: flex;
      flex-direction: column;
      gap: 10px;
      justify-content: center;
      align-items: center;
      margin: 60px;
      
  }
  
  
  
  
  
    `;
  
    main.style = `
       background-color: #3d425c;
       right:0;
       bottom: 0;
      height: 410px;
      min-height: 200px;
      width: 300px;
      position: fixed; /* Or absolute, depending on your needs */
      overflow-y: auto;
      resize: both;
      border-radius: 5%;
      min-width: 300px;
      max-width: 1000px;
      border: 1px solid #ccc; /* Add a border for better visibility */
      z-index: 1000;
    `;
  
    button.style = `
  
      background-color: rgb(78, 78, 78);
      width: 100%; 
      height: 40px;
      position: relative;
      justify-content: center;
      display: flex;
      padding: 5px; 
      box-sizing: border-box; 
  
  
  
  `;
  
    chat.style = `
    background-color:#3d425c;
      height: calc(100% - 90px); /* Calculate height dynamically */
      width: 100%; /* Occupy full width of main container */
      overflow-y: auto;
      box-sizing: border-box; /* Include padding in width calculation */
      padding: 10px;
  `;
  
    me.style = `
     height: 20px;
      background-color: #3d425c;
      box-sizing: border-box; /* Include padding in width calculation */
      padding: 5px;
      border-radius: 10px;
      display: flex;          
      flex-direction: row;
      justify-content: center;
      align-items: center;  
  
  
  `;
    menubuttons.style = `
     background-color: gray;
      position: relative;
      display:flex;
      justify-content:center;
      align-items: center;
      gap: 10px;
      padding: 10px;
      border-radius: 50px;
      border: 4px solid tan;
  `;
    input.style = `
   height: 100%;
      outline: none;
      padding: 5px;
      border: 1px tan solid;
      background-color: #242424;
      color: rgb(255, 255, 255);
      border-radius: 10px;
  `;
    menus.style = `
        border-radius: 100%; /* For a circular button */
      background-image: url("https://www.svgrepo.com/show/2087/plus.svg");
      background-color: transparent; /* Important!  So the image shows */
      background-position: center; /* Center the image */
      background-repeat: no-repeat; /* Prevent image tiling */
      background-size: cover;
      border: none; /* Remove any default button border */
      padding:10px; /* Adjust as needed for visual spacing */
      cursor: pointer; /* Make it look clickable */
      user-select: none;
    `;
  
    menubar.style = `
     height: 100px;
      width: 40px;
      border-radius: 30px;
      position: absolute;
      justify-items: center;
      align-content: center;
      opacity: 1%;
      left: 0;
      bottom: 70px;
      background-color: gray;
    `;
    settings.style = `
    background-image: url("https://www.svgrepo.com/show/10207/settings.svg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
      position: relative;
      display: flex;
      padding: 10px;
      margin: 30px;
      border-color: transparent;
      background-color: transparent;
    `;
    upload.style = `
    background-image: url("https://www.svgrepo.com/show/10207/settings.svg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
      position: relative;
      display: flex;
      padding: 10px;
      margin: 30px;
      border-color: transparent;
      background-color: transparent;
    `;
    menus.onfocus = () => {
      menubar.style.opacity = "100%";
    };
    menus.onblur = () => {
      menubar.style.opacity = "0%";
    };
    document.body.appendChild(main);
    main.appendChild(settingspage);
  
    main.appendChild(button);
    main.appendChild(chat);
    main.appendChild(me);
    me.appendChild(menubuttons);
    menubuttons.appendChild(menus);
    menubuttons.appendChild(input);
    menubuttons.appendChild(menubar);
    menubar.appendChild(settings);
    main.appendChild(settingspage);
    settingspage.appendChild(settingscontainer);
    settingscontainer.appendChild(apiput);
  settingscontainer.appendChild(prompt);
    settingscontainer.appendChild(close);
  
  
    
  
    document.body.appendChild(style);
  
    let isDragging = false;
    let offsetX = 0;
    let offsetY = 0;
  
    function handlePointerDown(e) {
      e.preventDefault();
      isDragging = true;
  
      if (e.type === "touchstart") {
        offsetX = e.touches[0].clientX - main.offsetLeft;
        offsetY = e.touches[0].clientY - main.offsetTop;
      } else {
        offsetX = e.clientX - main.offsetLeft;
        offsetY = e.clientY - main.offsetTop;
      }
  
      document.addEventListener("mousemove", handlePointerMove);
      document.addEventListener("touchmove", handlePointerMove);
      document.addEventListener("mouseup", handlePointerUp);
      document.addEventListener("touchend", handlePointerUp);
      document.addEventListener("mouseleave", handlePointerUp);
    }
  
    function handlePointerMove(e) {
      if (!isDragging) return;
  
      let x, y;
      if (e.type === "touchmove") {
        x = e.touches[0].clientX - offsetX;
        y = e.touches[0].clientY - offsetY;
      } else {
        x = e.clientX - offsetX;
        y = e.clientY - offsetY;
      }
  
      main.style.left = `${x}px`;
      main.style.top = `${y}px`;
    }
  
    function handlePointerUp() {
      isDragging = false;
      document.removeEventListener("mousemove", handlePointerMove);
      document.removeEventListener("touchmove", handlePointerMove);
      document.removeEventListener("mouseup", handlePointerUp);
      document.removeEventListener("touchend", handlePointerUp);
      document.removeEventListener("mouseleave", handlePointerUp);
    }
  
    button.addEventListener("mousedown", handlePointerDown);
    button.addEventListener("touchstart", handlePointerDown);
    const hide = document.getElementById("hide");
    document.addEventListener("keydown", (e) => {
      if (e.key.toLowerCase() === "e") {
        if (document.activeElement !== input) { // Changed 'text' to 'input'
          main.classList.toggle("hidden");
        }
      }
    });
      
      input.addEventListener("keydown", async (e) => {
        if (e.key === "Enter") {
          const userInput = input.value.trim(); // Store and trim user input
    
            if (userInput !== "") {
                input.value = ""; // Clear input immediately
    
                const userMessage = document.createElement("p");
                userMessage.className = "userMessage";
                userMessage.textContent = "You: " + userInput;
                chat.appendChild(userMessage);
                chat.scrollTop = chat.scrollHeight; // Scroll immediately after adding user message
    
                const botMessage = document.createElement("p"); // Create bot message element *before* the API call
                botMessage.className = "botMessage";
                botMessage.textContent = "Bot: Thinking..."; // Indicate that the bot is processing
                chat.appendChild(botMessage);
                chat.scrollTop = chat.scrollHeight; // Scroll after adding placeholder
                 try {
                  const response = await fetch(
                    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" +
                        localStorage.getItem("key"),
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            contents: [
                                {
                                    parts: [{ text: userInput }]
                                }
                            ]
                        })
                    }
                );
  
                if (!response.ok) {
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }
  
                const data = await response.json();
  
                   
                      chat.removeChild(botMessage);
                        if (
                            data.candidates &&
                            data.candidates.length > 0 &&
                            data.candidates[0].content
                        ) {
                            const botResponse = data.candidates[0].content.parts[0].text.toString().trim();
                            const botMessage = document.createElement("p");
                            botMessage.className = "botMessage";
                            const parsedResponse = marked.parse(botResponse);
    
                            if (parsedResponse.includes('class*="language-')) { 
                              // Use includes() for a simple check if the string exists
                          
                              // Select the element(s) containing the class.  You might need to adjust the selector
                              // depending on exactly how marked.js outputs the HTML.
                              const codeElements = document.querySelectorAll('[class*="language-"]');
                          
                          
                              codeElements.forEach(element => {
                                  element.classList.toggle("language");  // Toggle the class
                              });
                          
                              // ... other code to handle the response ... (e.g., append to the chat)
                          
                          
                          } {
                                botMessage.innerHTML = "Bot: " + parsedResponse;
                                console.log("not found")
                            }
    
                            chat.appendChild(botMessage);
                            input.value = ""; // Clear input
                            chat.scrollTop = chat.scrollHeight; // Scroll to bottom
                        } else {
                          
                          // Handle cases where the API doesn't return a valid response
                          console.error("Invalid API response:", data);
                          
                          const errorMessage = document.createElement("p");
                          errorMessage.className = "botMessage error";
                          errorMessage.textContent = "Error: Could not get a response.";
                          chat.appendChild(errorMessage);
                          input.value = "";
                          chat.scrollTop = chat.scrollHeight;
                        }
                    } catch (error) {
                        console.error("API request failed:", error);
                        const errorMessage = document.createElement("p");
                        errorMessage.className = "botMessage error";
                        errorMessage.textContent = "Error: API request failed.";
                        chat.appendChild(errorMessage);
                        input.value = "";
                        chat.scrollTop = chat.scrollHeight;
                    };
            }
        }
    });
  
  
  
  
  
  
  
  
      apiput.onchange = () => {
        if (localStorage.getItem("key")) {
          // Key already exists, update it
          localStorage.setItem("key", apiput.value);  
          console.log("API key updated in localStorage.");
        } else {
          // Key doesn't exist, create it
          localStorage.setItem("key", apiput.value);
          console.log("API key created in localStorage.");
        }
  
  
      }
    };
  
  
  init();